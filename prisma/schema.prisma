datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  documents     Document[]
  notes         Note[]
  createdAt     DateTime   @default(now())
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Document {
  id         String         @id @default(cuid())
  title      String
  fileUrl    String // âœ… S3 or UploadThing URL
  summary    String?
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  sharedWith SharedAccess[]
  notes      Note[]
  createdAt  DateTime       @default(now())
}

model SharedAccess {
  id         String   @id @default(cuid())
  email      String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
}

model Note {
  id         String   @id @default(cuid())
  content    String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
